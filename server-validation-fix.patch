--- server-simple-consolidated.ts.original
+++ server-simple-consolidated.ts.fixed
@@ -XX,XX +XX,XX @@
       switch (action) {
         case 'validate':
-          // For now, return simple validation response
-          return {
-            tool: 'workflow_manager',
-            action: 'validate',
-            valid: true,
-            message: 'üö® VALIDATION ENFORCEMENT ACTIVE: This consolidated server enforces validation-first workflow!',
-            nextStep: '‚úÖ You can now use workflow_manager({action: "create"})',
-            consolidatedArchitecture: true
-          };
+          if (!workflow) throw new Error('workflow is required for validate action');
+          
+          // Import validation cache
+          const { validationCache } = await import('../utils/validation-cache');
+          
+          // Perform basic validation
+          const validationResult = {
+            valid: true,
+            errors: [] as string[],
+            warnings: [] as string[]
+          };
+          
+          // Basic validation checks
+          if (!workflow.nodes || !Array.isArray(workflow.nodes)) {
+            validationResult.valid = false;
+            validationResult.errors.push('Workflow must have nodes array');
+          }
+          
+          if (!workflow.connections || typeof workflow.connections !== 'object') {
+            validationResult.valid = false;
+            validationResult.errors.push('Workflow must have connections object');
+          }
+          
+          // Record the validation result in cache - THIS IS THE KEY FIX
+          const hash = validationCache.recordValidation(workflow, validationResult);
+          
+          return {
+            tool: 'workflow_manager',
+            action: 'validate',
+            valid: validationResult.valid,
+            errors: validationResult.errors,
+            warnings: validationResult.warnings,
+            message: validationResult.valid 
+              ? 'üö® VALIDATION ENFORCEMENT ACTIVE: This consolidated server enforces validation-first workflow!'
+              : 'Validation failed - please fix errors before creating workflow',
+            nextStep: validationResult.valid 
+              ? '‚úÖ You can now use workflow_manager({action: "create"})'
+              : '‚ùå Fix validation errors first',
+            consolidatedArchitecture: true,
+            validationHash: hash
+          };