import { ToolDefinition } from '../types';

/**
 * Consolidated MCP Tools - 8 Essential Tools
 * 
 * Reduces 60+ tools to 8 essential tools while preserving ALL capabilities.
 * Designed to eliminate AI agent choice paralysis and enforce proper workflows.
 */
export const consolidatedTools: ToolDefinition[] = [
  {
    name: 'node_discovery',
    description: `üîç UNIFIED NODE DISCOVERY: Find, search, and get information about n8n nodes. Replaces 12 separate tools with one powerful interface.

‚õî CRITICAL: ONLY USE EXISTING N8N NODES!
‚ùå DO NOT create custom nodes or write custom code
‚ùå DO NOT use "Function" or "Code" nodes unless specifically requested
‚ùå DO NOT invent node types - they must exist in the n8n database (525 verified nodes)
‚úÖ ALWAYS search for existing nodes first before assuming you need custom code
‚úÖ n8n has built-in nodes for almost everything - use them!

üéØ ACTIONS & REQUIRED PARAMETERS:

üì¶ "search" - Find nodes by keyword
   Required: query (string)
   Optional: limit (number)
   Example: {action: "search", query: "slack"}

üìã "list" - Browse nodes by category or AI capability  
   Optional: category ("trigger"|"transform"|"output"|"input"), isAITool (boolean), limit (number)
   Examples: 
   - {action: "list", category: "trigger"}
   - {action: "list", isAITool: true}  ‚Üê FOR AI TOOLS USE THIS
   - {action: "list"} (defaults to triggers)

‚ÑπÔ∏è "get_info" - Get node configuration details
   Required: nodeType (e.g., "nodes-base.slack")
   Example: {action: "get_info", nodeType: "nodes-base.slack"}

üìÑ "get_documentation" - Get detailed documentation
   Required: nodeType (e.g., "nodes-base.slack")
   Example: {action: "get_documentation", nodeType: "nodes-base.slack"}

üîç "search_properties" - Find specific settings within a node
   Required: nodeType, query
   Example: {action: "search_properties", nodeType: "nodes-base.slack", query: "auth"}

üö® IMPORTANT FOR AI TOOLS:
- Use {action: "list", isAITool: true} NOT category: "AI"
- Or use templates_and_guides({action: "get_ai_tools"})

üìã WORKFLOW: Use this FIRST for any workflow building!
1Ô∏è‚É£ node_discovery({action: "search", query: "slack"}) 
2Ô∏è‚É£ node_discovery({action: "get_info", nodeType: "nodes-base.slack"})
3Ô∏è‚É£ node_validation({action: "get_for_task", task: "send_slack_message"})`,
    inputSchema: {
      type: 'object',
      properties: {
        action: {
          type: 'string',
          enum: ['search', 'list', 'get_info', 'get_documentation', 'search_properties'],
          description: 'Discovery action to perform'
        },
        query: {
          type: 'string',
          description: 'Search term for "search" or "find_property" actions'
        },
        category: {
          type: 'string',
          enum: ['trigger', 'transform', 'output', 'input'],
          description: 'Node category filter for "list" action'
        },
        isAITool: {
          type: 'boolean',
          description: 'Filter for AI-capable nodes (use for AI tools instead of category)'
        },
        nodeType: {
          type: 'string',
          description: 'Full node type for "get_info", "get_documentation", or "search_properties" actions (e.g., "nodes-base.slack")'
        },
        limit: {
          type: 'number',
          description: 'Results limit (default: 50)',
          default: 50
        }
      },
      required: ['action']
    }
  },

  {
    name: 'node_validation',
    description: `üîß UNIFIED NODE VALIDATION: Validate node configurations, check compatibility, and analyze dependencies. Replaces 6 separate validation tools.

üéØ ACTIONS:
‚Ä¢ "validate" - Full node configuration validation (minimal/full modes)
‚Ä¢ "compatibility" - Check if two nodes can connect
‚Ä¢ "dependencies" - Analyze property dependencies and visibility
‚Ä¢ "pre_flight" - Check if node fits in workflow context

‚ö° MODES:
‚Ä¢ minimal - Required fields only (fast)
‚Ä¢ full - Complete validation (thorough)  
‚Ä¢ operation - Operation-aware validation

üîó Use BEFORE adding nodes to workflows!`,
    inputSchema: {
      type: 'object',
      properties: {
        action: {
          type: 'string',
          enum: ['validate', 'compatibility', 'dependencies', 'pre_flight'],
          description: 'Validation action to perform'
        },
        nodeType: {
          type: 'string',
          description: 'Node type to validate (required for all actions)'
        },
        config: {
          type: 'object',
          description: 'Node configuration to validate (for "validate" action)'
        },
        operation: {
          type: 'string',
          description: 'Specific operation for operation-aware validation'
        },
        mode: {
          type: 'string',
          enum: ['minimal', 'full'],
          description: 'Validation depth for "validate" action',
          default: 'full'
        },
        targetNode: {
          type: 'string',
          description: 'Target node type for "compatibility" action'
        },
        workflowContext: {
          type: 'object',
          properties: {
            existingNodes: {
              type: 'array',
              items: { type: 'string' },
              description: 'Existing node types in workflow'
            },
            targetPosition: {
              type: 'string',
              enum: ['start', 'middle', 'end'],
              description: 'Where node will be placed'
            }
          },
          description: 'Workflow context for "pre_flight" action'
        }
      },
      required: ['action', 'nodeType']
    }
  },

  {
    name: 'workflow_manager',
    description: `üö® UNIFIED WORKFLOW MANAGER: Validate, create, and manage workflows. Replaces 10+ workflow tools. ENFORCES validation-first workflow!

‚õî CRITICAL WORKFLOW BUILDING RULES:
‚ùå DO NOT create workflows with custom/invented node types
‚ùå DO NOT use Code/Function nodes unless user explicitly requests custom code
‚ùå DO NOT skip validation - it catches broken node configurations
‚úÖ ALWAYS use node_discovery to find existing nodes FIRST
‚úÖ ALWAYS validate workflows before creation (enforced by server)
‚úÖ ALWAYS use built-in n8n nodes (525 available) before considering custom code
‚úÖ If a built-in node exists for the task, USE IT instead of Code node

üéØ ACTIONS:
‚Ä¢ "validate" - MANDATORY FIRST STEP before create! (full/quick/connections/expressions modes)
‚Ä¢ "create" - Create workflow (BLOCKED without validation!)
‚Ä¢ "get" - Download workflow by ID
‚Ä¢ "update" - Update existing workflow  
‚Ä¢ "list" - List workflows with filters
‚Ä¢ "search" - Find workflows by name

üö® ENFORCED WORKFLOW:
1Ô∏è‚É£ workflow_manager({action: "validate", workflow: {...}}) 
2Ô∏è‚É£ Fix ALL errors from validation
3Ô∏è‚É£ workflow_manager({action: "create", workflow: {...}})

‚õî CREATE WILL BE BLOCKED WITHOUT VALIDATION!`,
    inputSchema: {
      type: 'object',
      properties: {
        action: {
          type: 'string',
          enum: ['validate', 'create', 'get', 'update', 'list', 'search'],
          description: 'Workflow management action'
        },
        workflow: {
          type: 'object',
          description: 'Complete workflow JSON (required for validate/create actions)'
        },
        id: {
          type: 'string',
          description: 'Workflow ID (required for get/update actions)'
        },
        mode: {
          type: 'string',
          enum: ['quick', 'full', 'connections', 'expressions', 'nodes'],
          description: 'Validation mode for "validate" action',
          default: 'full'
        },
        changes: {
          type: 'object',
          description: 'Changes to apply for "update" action'
        },
        filters: {
          type: 'object',
          properties: {
            active: { type: 'boolean' },
            tags: { type: 'array', items: { type: 'string' } },
            limit: { type: 'number' }
          },
          description: 'Filters for "list" action'
        },
        query: {
          type: 'string',
          description: 'Search query for "search" action'
        },
        options: {
          type: 'object',
          properties: {
            validateNodes: { type: 'boolean' },
            validateConnections: { type: 'boolean' },
            validateExpressions: { type: 'boolean' },
            profile: {
              type: 'string',
              enum: ['minimal', 'runtime', 'ai-friendly', 'strict'],
              default: 'runtime'
            }
          },
          description: 'Validation options for "validate" action'
        }
      },
      required: ['action']
    }
  },

  {
    name: 'workflow_execution',
    description: `‚ö° UNIFIED WORKFLOW EXECUTION: Trigger, monitor, and manage workflow executions. Replaces 4 execution tools.

üéØ ACTIONS:
‚Ä¢ "trigger" - Execute workflow via webhook URL
‚Ä¢ "get" - Get execution details by ID
‚Ä¢ "list" - List executions with filters
‚Ä¢ "delete" - Delete execution records
‚Ä¢ "retry" - üÜï Retry failed/stopped execution (v3.0.0)
‚Ä¢ "monitor_running" - üÜï Monitor active executions (v3.0.0)
‚Ä¢ "list_mcp" - üÜï List MCP-managed workflows (v3.0.0)

üöÄ PREREQUISITES:
‚Ä¢ Workflow must be ACTIVE in n8n
‚Ä¢ Must have webhook trigger node for "trigger" action
‚Ä¢ HTTP method must match webhook configuration

üÜï v3.0.0 FEATURES:
‚Ä¢ Adaptive response sizing (80-90% smaller)
‚Ä¢ Smart retry suggestions
‚Ä¢ Running execution monitoring
‚Ä¢ MCP workflow filtering`,
    inputSchema: {
      type: 'object',
      properties: {
        action: {
          type: 'string',
          enum: ['trigger', 'get', 'list', 'delete', 'retry', 'monitor_running', 'list_mcp'],
          description: 'Execution action to perform'
        },
        webhookUrl: {
          type: 'string',
          description: 'Full webhook URL for "trigger" action'
        },
        httpMethod: {
          type: 'string',
          enum: ['GET', 'POST', 'PUT', 'DELETE'],
          description: 'HTTP method for "trigger" action (default: POST)',
          default: 'POST'
        },
        data: {
          type: 'object',
          description: 'Data to send with webhook for "trigger" action'
        },
        headers: {
          type: 'object',
          description: 'HTTP headers for "trigger" action'
        },
        id: {
          type: 'string',
          description: 'Execution ID for "get", "delete", or "retry" actions'
        },
        filters: {
          type: 'object',
          properties: {
            workflowId: { type: 'string' },
            status: { type: 'string', enum: ['success', 'error', 'waiting'] },
            limit: { type: 'number' },
            includeData: { type: 'boolean' }
          },
          description: 'Filters for "list" action'
        },
        waitForResponse: {
          type: 'boolean',
          description: 'Wait for completion for "trigger" action (default: true)',
          default: true
        },
        loadWorkflow: {
          type: 'boolean',
          description: 'Reload workflow definition for "retry" action (default: false)',
          default: false
        },
        workflowId: {
          type: 'string',
          description: 'Workflow ID for "monitor_running" or "list_mcp" actions'
        },
        includeStats: {
          type: 'boolean',
          description: 'Include execution statistics for "monitor_running" or "list_mcp" actions',
          default: false
        },
        limit: {
          type: 'number',
          description: 'Maximum results for "list_mcp" action (1-100, default: 20)',
          minimum: 1,
          maximum: 100,
          default: 20
        }
      },
      required: ['action']
    }
  },

  {
    name: 'templates_and_guides',
    description: `üìã UNIFIED TEMPLATES & GUIDES: Get workflow templates, guides, and examples. Replaces 6 separate tools.

üéØ ACTIONS & REQUIRED PARAMETERS:

üìÑ "get_template" - Download complete workflow template
   Required: templateId (number)
   Example: {action: "get_template", templateId: 123}

üîç "search_templates" - Find templates by keywords
   Required: query (string)
   Optional: limit (number)
   Example: {action: "search_templates", query: "slack"}

üìã "list_node_templates" - Find templates using specific nodes
   Optional: nodeTypes (array), limit (number)
   Example: {action: "list_node_templates", nodeTypes: ["nodes-base.slack"]}

üéØ "get_templates_for_task" - Get curated templates for specific tasks
   Required: task (string)
   Example: {action: "get_templates_for_task", task: "send_notifications"}

üìñ "get_workflow_guide" - Get comprehensive workflow building guide
   No parameters required
   Example: {action: "get_workflow_guide"}

ü§ñ "get_ai_tools" - List all AI-capable nodes (USE THIS FOR AI TOOLS!)
   Optional: limit (number)
   Example: {action: "get_ai_tools"}

üìä "get_database_stats" - Get database statistics and metrics
   Optional: includePerformance (boolean)
   Example: {action: "get_database_stats"}

üö® FOR AI TOOLS: Use {action: "get_ai_tools"} - this is the correct way!

üìã PERFECT starting point for workflow building!`,
    inputSchema: {
      type: 'object',
      properties: {
        action: {
          type: 'string',
          enum: ['get_template', 'search_templates', 'list_node_templates', 'get_templates_for_task', 'get_workflow_guide', 'get_ai_tools', 'get_database_stats'],
          description: 'Template/guide action to perform'
        },
        templateId: {
          type: 'number',
          description: 'Template ID for "get_template" action'
        },
        query: {
          type: 'string',
          description: 'Search query for "search_templates" action'
        },
        nodeTypes: {
          type: 'array',
          items: { type: 'string' },
          description: 'Node types to search for in "list_node_templates" action'
        },
        task: {
          type: 'string',
          description: 'Task name for "get_templates_for_task" action (e.g., "send_notifications")'
        },
        includePerformance: {
          type: 'boolean',
          description: 'Include performance metrics in "get_database_stats" action'
        },
        limit: {
          type: 'number',
          description: 'Results limit (default: 20)',
          default: 20
        }
      },
      required: ['action']
    }
  },

  {
    name: 'visual_verification',
    description: `üëÅÔ∏è UNIFIED VISUAL VERIFICATION: Advanced visual analysis with computer vision, OCR, and intelligence. Replaces 15+ visual tools. (OPTIONAL - Requires setup)

üéØ ACTIONS:
‚Ä¢ "setup" - Initialize visual verification system
‚Ä¢ "analyze" - Comprehensive visual and intelligence analysis
‚Ä¢ "detect_issues" - Visual issue detection with auto-fix suggestions
‚Ä¢ "monitor_start" - Start real-time execution monitoring
‚Ä¢ "monitor_stop" - Stop execution monitoring
‚Ä¢ "monitor_status" - Get monitoring status
‚Ä¢ "live_data" - Get live execution data
‚Ä¢ "intelligence" - Generate workflow intelligence report
‚Ä¢ "compare" - Advanced workflow state comparison
‚Ä¢ "screenshot" - Take workflow screenshot
‚Ä¢ "cleanup" - Cleanup visual verification system

‚ö†Ô∏è ADVANCED FEATURE: Requires browser automation and n8n UI access`,
    inputSchema: {
      type: 'object',
      properties: {
        action: {
          type: 'string',
          enum: ['setup', 'analyze', 'detect_issues', 'monitor_start', 'monitor_stop', 'monitor_status', 'live_data', 'intelligence', 'compare', 'screenshot', 'cleanup'],
          description: 'Visual verification action'
        },
        workflowId: {
          type: 'string',
          description: 'Workflow ID for most actions'
        },
        n8nUrl: {
          type: 'string',
          description: 'n8n instance URL for "setup" action'
        },
        credentials: {
          type: 'object',
          properties: {
            username: { type: 'string' },
            password: { type: 'string' }
          },
          description: 'n8n credentials for "setup" action'
        },
        config: {
          type: 'object',
          description: 'Configuration options for "setup" action'
        },
        analysisLevel: {
          type: 'string',
          enum: ['basic', 'comprehensive', 'deep'],
          description: 'Analysis depth for "analyze" action',
          default: 'comprehensive'
        },
        detectionTypes: {
          type: 'array',
          items: { type: 'string' },
          description: 'Issue detection types for "detect_issues" action'
        }
      },
      required: ['action']
    }
  },

  {
    name: 'n8n_system',
    description: `‚öôÔ∏è UNIFIED SYSTEM OPERATIONS: Check health, diagnose issues, and manage n8n system. Single tool for all system management.

üéØ OPERATIONS:
‚Ä¢ "health" - Check n8n API connectivity and status
‚Ä¢ "diagnose" - Troubleshoot connection and configuration issues  
‚Ä¢ "list_tools" - Show all available MCP tools and capabilities

üí° Use "health" first to verify n8n connection before other operations!`,
    inputSchema: {
      type: 'object',
      properties: {
        operation: {
          type: 'string',
          enum: ['health', 'diagnose', 'list_tools'],
          description: 'System operation to perform',
          default: 'health'
        },
        verbose: {
          type: 'boolean',
          description: 'Include detailed debug info for "diagnose" operation',
          default: false
        }
      }
    }
  },

  {
    name: 'workflow_diff',
    description: `üîÑ ADVANCED WORKFLOW DIFF: Update workflows using precise diff operations. Specialized tool for incremental changes without sending entire workflow.

‚õî CRITICAL: USE REAL N8N NODES ONLY!
‚ùå DO NOT add nodes with invented/custom types
‚ùå DO NOT use type: "custom.myNode" or similar - these will fail
‚úÖ ALWAYS verify node type exists using node_discovery BEFORE adding
‚úÖ Use format: "n8n-nodes-base.nodeName" or "@n8n/n8n-nodes-langchain.chatOpenAi"
‚úÖ Example valid types: "n8n-nodes-base.slack", "n8n-nodes-base.httpRequest", "n8n-nodes-base.webhook"

üéØ REQUIRED PARAMETERS BY OPERATION:

üì¶ addNode:
  - type: "addNode"
  - node: { name: "string", type: "n8n-nodes-base.X", position: [x,y], parameters: {} }

üóëÔ∏è removeNode:
  - type: "removeNode"  
  - nodeId: "string" OR nodeName: "string" (one required)

‚úèÔ∏è updateNode:
  - type: "updateNode"
  - nodeId: "string" OR nodeName: "string" (one required)  
  - changes: { "parameters.field": newValue, "name": "newName" }

üîó addConnection:
  - type: "addConnection"
  - source: "sourceNodeName" (required)
  - target: "targetNodeName" (required)
  - sourceOutput: "main" (optional, default: "main")
  - targetInput: "main" (optional, default: "main")

üìã EXAMPLES:
Add Slack node: {"type":"addNode","node":{"name":"Send Alert","type":"n8n-nodes-base.slack","position":[400,200],"parameters":{"channel":"#alerts"}}}
Update webhook path: {"type":"updateNode","nodeName":"Webhook","changes":{"parameters.path":"new-path"}}
Connect nodes: {"type":"addConnection","source":"Webhook","target":"Send Alert"}

üöÄ TRANSACTIONAL: All operations succeed or all fail (max 5 operations)
üß† SMART DEPENDENCIES: Engine handles node/connection order automatically`,
    inputSchema: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          description: 'Workflow ID to update (required)'
        },
        operations: {
          type: 'array',
          description: 'Array of diff operations (max 5)',
          maxItems: 5,
          items: {
            oneOf: [
              {
                type: 'object',
                description: 'Add new node with full configuration',
                properties: {
                  type: { const: 'addNode' },
                  description: { type: 'string' },
                  node: {
                    type: 'object',
                    properties: {
                      name: { type: 'string', description: 'Unique node name' },
                      type: { type: 'string', description: 'Node type (e.g., n8n-nodes-base.slack)' },
                      position: { 
                        type: 'array', 
                        items: { type: 'number' }, 
                        minItems: 2, 
                        maxItems: 2,
                        description: 'Node position [x, y]'
                      },
                      parameters: { type: 'object', description: 'Node configuration parameters' }
                    },
                    required: ['name', 'type', 'position'],
                    additionalProperties: true
                  }
                },
                required: ['type', 'node'],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Remove node by ID or name',
                properties: {
                  type: { const: 'removeNode' },
                  description: { type: 'string' },
                  nodeId: { type: 'string', description: 'Node ID (alternative to nodeName)' },
                  nodeName: { type: 'string', description: 'Node name (alternative to nodeId)' }
                },
                required: ['type'],
                anyOf: [
                  { required: ['nodeId'] },
                  { required: ['nodeName'] }
                ],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Update node properties with changes object',
                properties: {
                  type: { const: 'updateNode' },
                  description: { type: 'string' },
                  nodeId: { type: 'string', description: 'Node ID (alternative to nodeName)' },
                  nodeName: { type: 'string', description: 'Node name (alternative to nodeId)' },
                  changes: { 
                    type: 'object', 
                    description: 'Object with property paths and new values (e.g., {"parameters.field": "value"})' 
                  }
                },
                required: ['type', 'changes'],
                anyOf: [
                  { required: ['nodeId'] },
                  { required: ['nodeName'] }
                ],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Move node to new position',
                properties: {
                  type: { const: 'moveNode' },
                  description: { type: 'string' },
                  nodeId: { type: 'string', description: 'Node ID (alternative to nodeName)' },
                  nodeName: { type: 'string', description: 'Node name (alternative to nodeId)' },
                  position: { 
                    type: 'array', 
                    items: { type: 'number' }, 
                    minItems: 2, 
                    maxItems: 2,
                    description: 'New position [x, y]'
                  }
                },
                required: ['type', 'position'],
                anyOf: [
                  { required: ['nodeId'] },
                  { required: ['nodeName'] }
                ],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Add connection between nodes',
                properties: {
                  type: { const: 'addConnection' },
                  description: { type: 'string' },
                  source: { type: 'string', description: 'Source node name (required)' },
                  target: { type: 'string', description: 'Target node name (required)' },
                  sourceOutput: { type: 'string', description: 'Source output type (default: main)', default: 'main' },
                  targetInput: { type: 'string', description: 'Target input type (default: main)', default: 'main' },
                  sourceOutputIndex: { type: 'number', description: 'Source output index (default: 0)', default: 0 },
                  targetInputIndex: { type: 'number', description: 'Target input index (default: 0)', default: 0 }
                },
                required: ['type', 'source', 'target'],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Remove connection between nodes',
                properties: {
                  type: { const: 'removeConnection' },
                  description: { type: 'string' },
                  source: { type: 'string', description: 'Source node name (required)' },
                  target: { type: 'string', description: 'Target node name (required)' },
                  sourceOutput: { type: 'string', description: 'Source output type (default: main)', default: 'main' },
                  targetInput: { type: 'string', description: 'Target input type (default: main)', default: 'main' }
                },
                required: ['type', 'source', 'target'],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Enable node for execution',
                properties: {
                  type: { const: 'enableNode' },
                  description: { type: 'string' },
                  nodeId: { type: 'string', description: 'Node ID (alternative to nodeName)' },
                  nodeName: { type: 'string', description: 'Node name (alternative to nodeId)' }
                },
                required: ['type'],
                anyOf: [
                  { required: ['nodeId'] },
                  { required: ['nodeName'] }
                ],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Disable node from execution',
                properties: {
                  type: { const: 'disableNode' },
                  description: { type: 'string' },
                  nodeId: { type: 'string', description: 'Node ID (alternative to nodeName)' },
                  nodeName: { type: 'string', description: 'Node name (alternative to nodeId)' }
                },
                required: ['type'],
                anyOf: [
                  { required: ['nodeId'] },
                  { required: ['nodeName'] }
                ],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Update workflow settings',
                properties: {
                  type: { const: 'updateSettings' },
                  description: { type: 'string' },
                  settings: { 
                    type: 'object',
                    description: 'Workflow settings object'
                  }
                },
                required: ['type', 'settings'],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Update workflow name',
                properties: {
                  type: { const: 'updateName' },
                  description: { type: 'string' },
                  name: { type: 'string', description: 'New workflow name' }
                },
                required: ['type', 'name'],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Add tag to workflow',
                properties: {
                  type: { const: 'addTag' },
                  description: { type: 'string' },
                  tag: { type: 'string', description: 'Tag to add' }
                },
                required: ['type', 'tag'],
                additionalProperties: false
              },
              {
                type: 'object',
                description: 'Remove tag from workflow',
                properties: {
                  type: { const: 'removeTag' },
                  description: { type: 'string' },
                  tag: { type: 'string', description: 'Tag to remove' }
                },
                required: ['type', 'tag'],
                additionalProperties: false
              }
            ]
          }
        },
        validateOnly: {
          type: 'boolean',
          description: 'Test operations without applying (default: false)',
          default: false
        }
      },
      required: ['id', 'operations']
    }
  }
];

/**
 * ‚õî CRITICAL GUIDELINES FOR AI AGENTS - READ THIS FIRST! ‚õî
 *
 * üö® GOLDEN RULE: USE EXISTING N8N NODES, NOT CUSTOM CODE!
 *
 * ‚ùå NEVER DO THIS:
 * - Create workflows with made-up node types like "custom.myNode"
 * - Use Code/Function nodes as first choice (only when NO built-in exists)
 * - Skip node_discovery search - ALWAYS search first!
 * - Guess node type names - verify they exist in database
 * - Create workflows without validation
 *
 * ‚úÖ ALWAYS DO THIS:
 * - Search for existing nodes FIRST: node_discovery({action: "search", query: "..."})
 * - Verify node exists before using it in workflows
 * - Use built-in nodes (525 available!) instead of custom code
 * - Validate ALL workflows before creation (enforced by server)
 * - Check node_discovery for proper node type format
 *
 * üìã CORRECT WORKFLOW (MANDATORY STEPS):
 *
 * Step 1: SEARCH for existing nodes
 *   node_discovery({action: "search", query: "slack notifications"})
 *   ‚Üí Returns: "n8n-nodes-base.slack" ‚úÖ USE THIS!
 *
 * Step 2: GET node configuration details
 *   node_discovery({action: "get_info", nodeType: "n8n-nodes-base.slack"})
 *   ‚Üí Returns: properties, operations, parameters
 *
 * Step 3: VALIDATE node configuration
 *   node_validation({action: "validate", nodeType: "n8n-nodes-base.slack", config: {...}})
 *   ‚Üí Catches configuration errors before workflow creation
 *
 * Step 4: BUILD workflow JSON using VERIFIED node types
 *   Use exact node type from Step 1: "n8n-nodes-base.slack"
 *   NOT: "slack", "Slack", "custom.slack" ‚ùå
 *
 * Step 5: VALIDATE complete workflow (MANDATORY)
 *   workflow_manager({action: "validate", workflow: {...}})
 *   ‚Üí Server enforces this - CREATE will fail without validation!
 *
 * Step 6: CREATE workflow (only after validation passes)
 *   workflow_manager({action: "create", workflow: {...}})
 *
 * üéØ EXAMPLE: Send Slack notification workflow
 *
 * // ‚ùå WRONG - Made-up node type
 * {
 *   "nodes": [{
 *     "type": "slackNotification",  // ‚ùå NOT A REAL NODE TYPE!
 *     "parameters": {...}
 *   }]
 * }
 *
 * // ‚úÖ CORRECT - Using real n8n node
 * {
 *   "nodes": [{
 *     "type": "n8n-nodes-base.slack",  // ‚úÖ VERIFIED WITH node_discovery!
 *     "parameters": {
 *       "resource": "message",
 *       "operation": "post",
 *       "channel": "#general",
 *       "text": "Hello!"
 *     }
 *   }]
 * }
 *
 * üî• STREAMLINED WORKFLOW (8 tools only!):
 * 1Ô∏è‚É£ node_discovery({action: "search", query: "slack"}) - Find nodes
 * 2Ô∏è‚É£ node_discovery({action: "get_info", nodeType: "n8n-nodes-base.slack"}) - Get config
 * 3Ô∏è‚É£ node_validation({action: "validate", nodeType: "...", config: {...}}) - Validate node
 * 4Ô∏è‚É£ workflow_manager({action: "validate", workflow: {...}}) - MANDATORY validation
 * 5Ô∏è‚É£ workflow_manager({action: "create", workflow: {...}}) - Create (only after validation!)
 * 6Ô∏è‚É£ workflow_execution({action: "trigger", webhookUrl: "..."}) - Execute
 *
 * üö® VALIDATION ENFORCEMENT:
 * - workflow_manager CREATE is BLOCKED without prior validation
 * - Server enforces validation-first workflow
 * - No more bypassing validation!
 * - Prevents broken workflows from being created
 *
 * üìã 525 BUILT-IN NODES AVAILABLE:
 * - HTTP Request, Webhooks, Schedules
 * - Slack, Discord, Teams, Email
 * - Database (MySQL, Postgres, MongoDB)
 * - Cloud (AWS, Azure, Google Cloud)
 * - AI (OpenAI, Anthropic, Pinecone, LangChain)
 * - And 500+ more!
 *
 * üí° WHEN TO USE CODE NODE:
 * - User explicitly requests custom JavaScript/Python code
 * - NO built-in node exists for the specific task (rare!)
 * - You've searched node_discovery and found nothing suitable
 * - NEVER as first choice - always search for built-in nodes first!
 *
 * ‚ö° PERFORMANCE:
 * - node_discovery with "essentials" - Fast configuration
 * - workflow_manager with "quick" validation - Basic checks
 * - templates_and_guides - Working examples and patterns
 */